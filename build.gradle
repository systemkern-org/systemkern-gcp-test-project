group 'com.systemkern'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

buildscript {
    ext.kotlinVersion = '1.3.21'
    ext.junitPlatformVersion = '1.0.0-M4'
    ext.junitJupiterVersion = '5.4.1'
    ext.serialization_version = '0.10.0'
    ext.web_path = 'web'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://kotlin.bintray.com/kotlin-dev" }
        maven { url 'http://nexus.acompany.ch/content/groups/public' }
        maven { url "https://plugins.gradle.org/m2/" } //moowork
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'kotlin2js'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.moowork.node'


sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://kotlin.bintray.com/kotlin-dev" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
    //testCompile "io.kotlintest:kotlintest:$kotlinVersion"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlinVersion"
}

compileKotlin2Js.kotlinOptions {
}


[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "commonjs"
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

node {
    download = true
}

task installQunit(type: NpmTask) {
    args = ['install', 'qunit']
}

task runQunit(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installQunit]) {
    script = file('node_modules/qunit/bin/qunit')
    args = [projectDir.toPath().relativize(file(compileTestKotlin2Js.outputFile).toPath())]
}

test.dependsOn runQunit


task assembleWeb(type: Sync) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                        !path.startsWith("META-INF/"))
            }
        })
    }
    from compileKotlin2Js.destinationDir into "${projectDir}/web"
    from sourceSets.main.resources.srcDirs into "${projectDir}/web"
    from 'src/main/javascript' into "${projectDir}/web"

    dependsOn classes
}

assemble.dependsOn assembleWeb
